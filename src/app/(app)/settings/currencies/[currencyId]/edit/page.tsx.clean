"use client";

import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Save, DollarSign, AlertTriangle, Loader2 } from "lucide-react";
import Link from "next/link";
import { useRouter, useParams } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";

// Тип для валюты (в соответствии с моделью БД)
interface Currency {
  id: number;
  name: string;
  isoCode: string; // в БД это поле называется iso_code
  symbol: string;
  exchangeRate: number;
  isDefault?: boolean;
}

const currencyFormSchema = z.object({
  name: z.string().min(1, { message: "Название валюты обязательно" }),
  isoCode: z.string().min(3, { message: "Код валюты должен состоять минимум из 3 символов (например, USD)" }).max(5, { message: "Код валюты не должен превышать 5 символов"}),
  symbol: z.string().min(1, { message: "Символ валюты обязателен (например, $)" }).max(5, { message: "Символ валюты не должен превышать 5 символов"}),
  exchangeRate: z.string().min(1, { message: "Курс обмена обязателен" }),
});

type CurrencyFormValues = z.infer<typeof currencyFormSchema>;

export default function EditCurrencyPage() {
  const router = useRouter();
  const params = useParams();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [isFetching, setIsFetching] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [submissionError, setSubmissionError] = useState<string | null>(null);
  const currencyId = params.currencyId as string;

  const form = useForm<CurrencyFormValues>({
    resolver: zodResolver(currencyFormSchema),
    defaultValues: {
      name: "",
      isoCode: "",
      symbol: "",
      exchangeRate: "",
    },
    mode: "onChange",
  });

  useEffect(() => {
    if (!currencyId) {
      setError("ID валюты отсутствует.");
      setIsFetching(false);
      return;
    }

    const fetchCurrencyData = async () => {
      setIsFetching(true);
      setError(null);
      try {
        // Запрашиваем данные из БД через API
        const response = await fetch(`/api/settings/currencies/${currencyId}`);
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `Ошибка получения валюты: ${response.statusText}`);
        }
        
        // Получаем данные из БД
        const data = await response.json();
        console.log('Получены данные валюты из БД:', data);

        if (data) {
          form.reset({
            name: data.name,
            isoCode: data.isoCode,
            symbol: data.symbol,
            exchangeRate: data.exchangeRate.toString(),
          });
        } else {
          throw new Error("Валюта не найдена.");
        }
      } catch (err) {
        console.error("Ошибка при получении данных валюты:", err);
        const message = err instanceof Error ? err.message : "Произошла неизвестная ошибка";
        setError(message);
        toast({
          title: "Ошибка получения данных",
          description: message,
          variant: "destructive",
        });
      } finally {
        setIsFetching(false);
      }
    };

    fetchCurrencyData();
  }, [currencyId, form, toast]);

  const onSubmit = async (values: CurrencyFormValues) => {
    try {
      setIsSubmitting(true);
      setSubmissionError(null);

      // Отправляем данные в API для сохранения в БД
      const response = await fetch(`/api/settings/currencies/${currencyId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: values.name,
          isoCode: values.isoCode,
          symbol: values.symbol,
          exchangeRate: parseFloat(values.exchangeRate)
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Ошибка обновления валюты: ${response.statusText}`);
      }
      
      const updatedCurrency = await response.json();
      console.log("Валюта успешно обновлена:", updatedCurrency);
      
      toast({
        title: "Валюта обновлена",
        description: `Валюта "${values.name} (${values.isoCode})" успешно обновлена.`,
      });

      router.push("/settings/currencies");
      router.refresh();
    } catch (error) {
      console.error("Не удалось обновить валюту:", error);
      const errorMessage =
        error instanceof Error ? error.message : "Произошла неизвестная ошибка";
      setSubmissionError(errorMessage);
      toast({
        title: "Ошибка обновления валюты",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isFetching) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
        <p className="ml-2 text-muted-foreground">Загрузка данных валюты...</p>
      </div>
    );
  }

  if (error && !isFetching) {
    return (
      <Card className="shadow-sm border-destructive bg-destructive/10">
        <CardHeader>
          <CardTitle className="text-destructive">Ошибка</CardTitle>
        </CardHeader>
        <CardContent className="flex items-center gap-2 text-destructive py-4">
          <AlertTriangle className="h-5 w-5" />
          <p>{error}</p>
        </CardContent>
        <CardContent>
          <Link href="/settings/currencies">
            <Button variant="outline">
              <ArrowLeft className="mr-2 h-4 w-4" /> Вернуться к списку валют
            </Button>
          </Link>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Link href="/settings/currencies">
            <Button variant="outline" size="icon">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-xl font-semibold">Редактирование валюты</h1>
            <p className="text-sm text-muted-foreground">
              Измените информацию о валюте и сохраните изменения
            </p>
          </div>
        </div>
        <Button 
          onClick={form.handleSubmit(onSubmit)} 
          disabled={isSubmitting || !form.formState.isValid || isFetching}
        >
          <Save className="mr-2 h-4 w-4" /> 
          {isSubmitting ? "Сохранение..." : "Сохранить изменения"}
        </Button>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <DollarSign className="h-5 w-5 text-primary" />
            Данные валюты
          </CardTitle>
          <CardDescription>
            Внесите необходимые изменения в форму ниже
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Название валюты</FormLabel>
                    <FormControl>
                      <Input placeholder="например, Доллар США" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="isoCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Код валюты (ISO)</FormLabel>
                      <FormControl>
                        <Input placeholder="USD" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="symbol"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Символ валюты</FormLabel>
                      <FormControl>
                        <Input placeholder="например, $, €, ₽" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="exchangeRate"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Курс обмена</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          step="0.0001" 
                          placeholder="например, 1.0000, 90.5000" 
                          {...field} 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              {submissionError && (
                <div className="p-3 rounded-md bg-destructive/10 text-destructive text-sm flex items-center gap-2 mt-4">
                  <AlertTriangle className="h-4 w-4" />
                  {submissionError}
                </div>
              )}
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}
