/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –ó–∞–ø—É—Å–∫–∞—Ç—å: node scripts/check-docker-config.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'Dockerfile',
  'docker-compose.yml',
  '.env.docker',
  'scripts/db-init/01-init.sql'
];

let missingFiles = [];
requiredFiles.forEach(file => {
  if (!fs.existsSync(path.join(process.cwd(), file))) {
    missingFiles.push(file);
  }
});

if (missingFiles.length > 0) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:');
  missingFiles.forEach(file => {
    console.error(`   - ${file}`);
  });
  console.error('\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç.');
  process.exit(1);
}

console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã.');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
try {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile...');
  const dockerfile = fs.readFileSync(path.join(process.cwd(), 'Dockerfile'), 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  const requiredInstructions = [
    'FROM node:18-alpine AS builder',
    'ARG NODE_ENV',
    'ARG DB_NAME',
    'ARG DB_USERNAME',
    'ARG DB_PASSWORD',
    'WORKDIR /app',
    'EXPOSE 3000',
    'CMD'
  ];
  
  let missingInstructions = [];
  requiredInstructions.forEach(instruction => {
    if (!dockerfile.includes(instruction)) {
      missingInstructions.push(instruction);
    }
  });
  
  if (missingInstructions.length > 0) {
    console.warn('‚ö†Ô∏è –í Dockerfile –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
    missingInstructions.forEach(instruction => {
      console.warn(`   - ${instruction}`);
    });
  } else {
    console.log('‚úÖ Dockerfile —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.');
  }
  
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Dockerfile: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml
try {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml...');
  const dockerCompose = fs.readFileSync(path.join(process.cwd(), 'docker-compose.yml'), 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  const requiredServices = ['app', 'db'];
  
  let missingServices = [];
  requiredServices.forEach(service => {
    if (!dockerCompose.includes(`  ${service}:`)) {
      missingServices.push(service);
    }
  });
  
  if (missingServices.length > 0) {
    console.warn('‚ö†Ô∏è –í docker-compose.yml –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã:');
    missingServices.forEach(service => {
      console.warn(`   - ${service}`);
    });
  } else {
    console.log('‚úÖ docker-compose.yml —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã.');
  }
  
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ docker-compose.yml: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.docker
try {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.docker...');
  const envDocker = fs.readFileSync(path.join(process.cwd(), '.env.docker'), 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const requiredVars = [
    'DATABASE_URL',
    'DB_NAME',
    'DB_USERNAME',
    'DB_PASSWORD',
    'NODE_ENV',
    'POSTGRES_USER',
    'POSTGRES_PASSWORD'
  ];
  
  let missingVars = [];
  requiredVars.forEach(variable => {
    if (!envDocker.includes(`${variable}=`)) {
      missingVars.push(variable);
    }
  });
  
  if (missingVars.length > 0) {
    console.warn('‚ö†Ô∏è –í .env.docker –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    missingVars.forEach(variable => {
      console.warn(`   - ${variable}`);
    });
  } else {
    console.log('‚úÖ .env.docker —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (envDocker.includes('POSTGRES_PASSWORD=postgres') || 
      envDocker.includes('DB_PASSWORD=postgres')) {
    console.warn('‚ö†Ô∏è –í .env.docker –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL API
  if (envDocker.includes('–≤–∞—à_–¥–æ–º–µ–Ω_–∏–ª–∏_ip_–∞–¥—Ä–µ—Å')) {
    console.warn('‚ö†Ô∏è –í .env.docker –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è NEXT_PUBLIC_API_URL. –ó–∞–º–µ–Ω–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
  }
  
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ .env.docker: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
try {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker...');
  
  try {
    const dockerVersion = execSync('docker --version', { stdio: 'pipe' }).toString().trim();
    console.log(`‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${dockerVersion}`);
  } catch (error) {
    console.warn('‚ö†Ô∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Docker-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }
  
  try {
    const dockerComposeVersion = execSync('docker-compose --version', { stdio: 'pipe' }).toString().trim();
    console.log(`‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${dockerComposeVersion}`);
  } catch (error) {
    console.warn('‚ö†Ô∏è Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Docker-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }
  
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker: ${error.message}`);
}

console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ:');
console.log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ docker-compose up -d');
console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:3000');
console.log('2. –î–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
console.log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ node scripts/prepare-deploy.js');
console.log('   - –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
