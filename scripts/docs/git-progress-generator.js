const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const PROGRESS_DIR = path.join(__dirname, '../../docs/progress');
const COMMITS_SINCE_DEFAULT = '1.week.ago'; // –ü–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const GIT_REPO_URL_CACHE = { url: null }; // –ö—ç—à –¥–ª—è URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

// –¢–∏–ø—ã –∫–æ–º–º–∏—Ç–æ–≤ –∏ –∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
const COMMIT_TYPES = {
  feat: '‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (Features)',
  fix: 'üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Fixes)',
  docs: 'üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (Docs)',
  style: 'üíÖ –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è (Styles)',
  refactor: '‚ôªÔ∏è –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ (Refactoring)',
  perf: '‚ö°Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Performance)',
  test: '‚úÖ –¢–µ—Å—Ç—ã (Tests)',
  build: 'üèóÔ∏è –°–±–æ—Ä–∫–∞ (Build System)',
  ci: 'üîÑ CI/CD',
  chore: 'üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ (Chores)',
  other: '‚öôÔ∏è –ü—Ä–æ—á–µ–µ',
};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

function runCommand(command) {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error executing command: ${command}\nStderr: ${stderr}`);
        return reject(new Error(`Command failed: ${command}\n${stderr}`));
      }
      resolve(stdout.trim());
    });
  });
}

async function getGitRepoUrl() {
  if (GIT_REPO_URL_CACHE.url) return GIT_REPO_URL_CACHE.url;
  try {
    const remoteOutput = await runCommand('git remote -v');
    const originFetchLine = remoteOutput.split('\n').find(line => line.startsWith('origin') && line.endsWith('(fetch)'));
    if (originFetchLine) {
      const match = originFetchLine.match(/origin\s+(.+)\s+\(fetch\)/);
      if (match && match[1]) {
        let url = match[1];
        if (url.startsWith('git@')) { // SSH URL
          url = url.replace(':', '/').replace('git@', 'https://');
        }
        if (url.endsWith('.git')) {
          url = url.slice(0, -4);
        }
        GIT_REPO_URL_CACHE.url = url;
        return url;
      }
    }
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:', error.message);
  }
  return null;
}

function parseGitLog(logOutput) {
  const commits = [];
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç
  const commitEntries = logOutput.split('<----COMMIT_END---->');

  commitEntries.forEach(entry => {
    if (entry.trim() === '') return;

    const lines = entry.trim().split('\n');
    const commitData = {};
    let fileChangesPart = false;
    let bodyBuffer = [];

    commitData.hash = lines.shift(); // –ü–æ–ª–Ω—ã–π —Ö–µ—à
    commitData.shortHash = lines.shift(); // –ö–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à
    commitData.authorName = lines.shift();
    commitData.authorEmail = lines.shift(); // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Ç—á–µ—Ç–µ, –Ω–æ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    commitData.date = lines.shift(); // YYYY-MM-DD
    commitData.subject = lines.shift(); // –¢–µ–º–∞

    // –û—Å—Ç–∞–ª—å–Ω–æ–µ - —Ç–µ–ª–æ –∫–æ–º–º–∏—Ç–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const bodyAndFiles = lines.join('\n');
    const filesMarker = "\nChanged files:\n";
    const filesStartIndex = bodyAndFiles.indexOf(filesMarker);

    if (filesStartIndex !== -1) {
        commitData.body = bodyAndFiles.substring(0, filesStartIndex).trim();
        const filesStr = bodyAndFiles.substring(filesStartIndex + filesMarker.length).trim();
        commitData.changedFiles = filesStr.split('\n').map(f => f.trim()).filter(f => f);
    } else {
        commitData.body = bodyAndFiles.trim();
        commitData.changedFiles = [];
    }
    
    commits.push(commitData);
  });
  return commits;
}

function groupCommits(commits) {
  const grouped = {};
  Object.keys(COMMIT_TYPES).forEach(type => grouped[type] = []);

  commits.forEach(commit => {
    const subject = commit.subject.toLowerCase();
    let typeFound = false;
    for (const type in COMMIT_TYPES) {
      if (subject.startsWith(type + ':') || subject.startsWith(type + '(')) {
        grouped[type].push(commit);
        typeFound = true;
        break;
      }
    }
    if (!typeFound) {
      grouped.other.push(commit);
    }
  });
  return grouped;
}

async function generateMarkdown(groupedCommits, date, repoUrl) {
  let markdown = `# –ñ—É—Ä–Ω–∞–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - ${date}\n\n`;
  let changesFound = false;

  for (const type in groupedCommits) {
    const commitsOfType = groupedCommits[type];
    if (commitsOfType.length > 0) {
      changesFound = true;
      markdown += `## ${COMMIT_TYPES[type]}\n\n`;
      commitsOfType.forEach(commit => {
        let commitLine = `- ${commit.subject}`;
        if (repoUrl) {
          commitLine += ` ([${commit.shortHash}](${repoUrl}/commit/${commit.hash}))`;
        } else {
          commitLine += ` (${commit.shortHash})`;
        }
        commitLine += ` (–ê–≤—Ç–æ—Ä: ${commit.authorName})\n`;
        markdown += commitLine;

        if (commit.body) {
          markdown += `  \`\`\`\n  ${commit.body.split('\n').map(l => l.trim()).join('\n  ')}\n  \`\`\`\n`;
        }
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        // if (commit.changedFiles.length > 0) {
        //   markdown += `    *–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${commit.changedFiles.join(', ')}*\n`;
        // }
      });
      markdown += '\n';
    }
  }

  if (!changesFound) {
    markdown += "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞.\n";
  }
  return markdown;
}

// --- –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ ---
async function generateReport(sinceDate) {
  const today = new Date().toISOString().split('T')[0];
  const outputFileName = `${today}-progress.md`;
  const outputFilePath = path.join(PROGRESS_DIR, outputFileName);

  console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å ${sinceDate} –ø–æ ${today}...`);

  const repoUrl = await getGitRepoUrl();
  const gitLogCommand = `git log --since="${sinceDate}" --pretty="format:%H%n%h%n%an%n%ae%n%ad%n%s%n%b%nChanged files:%n%n<----COMMIT_END---->" --name-only`;
  
  const logOutput = await runCommand(gitLogCommand);

  if (!logOutput) {
    console.log('–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.');
    const markdownContent = `# –ñ—É—Ä–Ω–∞–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - ${today}\n\n–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤.\n`;
    await fs.mkdir(PROGRESS_DIR, { recursive: true });
    await fs.writeFile(outputFilePath, markdownContent);
    console.log(`–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${outputFilePath}`);
    return outputFilePath;
  }
  
  const commits = parseGitLog(logOutput);

  if (commits.length === 0) {
    console.log('–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞.');
    const markdownContent = `# –ñ—É—Ä–Ω–∞–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - ${today}\n\n–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞.\n`;
    await fs.mkdir(PROGRESS_DIR, { recursive: true });
    await fs.writeFile(outputFilePath, markdownContent);
    console.log(`–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${outputFilePath}`);
    return outputFilePath;
  }

  const groupedCommits = groupCommits(commits);
  const markdownContent = await generateMarkdown(groupedCommits, today, repoUrl);

  await fs.mkdir(PROGRESS_DIR, { recursive: true });
  await fs.writeFile(outputFilePath, markdownContent);

  console.log(`–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${outputFilePath}`);
  return outputFilePath;
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI ---
async function main() {
  try {
    const since = process.argv[2] || COMMITS_SINCE_DEFAULT;
    await generateReport(since);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–∑ CLI:', error.message);
    process.exit(1);
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ CLI
if (require.main === module) {
  main();
}

module.exports = {
  generateReport, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
  // –î–ª—è documentation-updater.js –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–æ–±–Ω–µ–µ –∏–º–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
  // –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç COMMITS_SINCE_DEFAULT –∏–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
  generateCurrentProgressReport: () => generateReport(COMMITS_SINCE_DEFAULT)
};
