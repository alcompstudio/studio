/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞ –∫ –¥–µ–ø–ª–æ—é
 * –ó–∞–ø—É—Å–∫–∞—Ç—å: node scripts/prepare-deploy.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
const archiveName = 'studio_app_deploy.tar.gz';
const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
const archiveWithTimestamp = `studio_app_deploy_${timestamp}.tar.gz`;

console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é...\n');

try {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è .env.docker
  if (!fs.existsSync(path.join(process.cwd(), '.env.docker'))) {
    console.error('‚ùå –§–∞–π–ª .env.docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è docker-compose.yml
  if (!fs.existsSync(path.join(process.cwd(), 'docker-compose.yml'))) {
    console.error('‚ùå –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Dockerfile
  if (!fs.existsSync(path.join(process.cwd(), 'Dockerfile'))) {
    console.error('‚ùå –§–∞–π–ª Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
    process.exit(1);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ git
    const hasGit = fs.existsSync(path.join(process.cwd(), '.git'));
    
    if (hasGit) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º git archive, –µ—Å–ª–∏ –µ—Å—Ç—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      execSync(`git archive --format=tar.gz -o ${archiveWithTimestamp} HEAD`, { stdio: 'inherit' });
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç git, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä
      console.log('‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .git –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä.');
      
      // –í Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
      const command = `powershell -Command "Compress-Archive -Path * -DestinationPath ${archiveWithTimestamp.replace('.tar.gz', '.zip')} -Force"`;
      execSync(command, { stdio: 'inherit' });
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤ ${archiveWithTimestamp.replace('.tar.gz', '.zip')}`);
      console.log('‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ—Ç –∞—Ä—Ö–∏–≤ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è node_modules.');
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Git –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–æ–≤.');
      process.exit(0);
    }
    
    console.log(`‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ${archiveWithTimestamp}`);
    
    // –ö–æ–ø–∏—Ä—É–µ–º .env.docker –≤ –∞—Ä—Ö–∏–≤
    console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env.docker...');
    const envDocker = fs.readFileSync(path.join(process.cwd(), '.env.docker'), 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª —Å—Ç—Ä–æ–∫–∏-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
    if (envDocker.includes('–≤–∞—à_–¥–æ–º–µ–Ω_–∏–ª–∏_ip_–∞–¥—Ä–µ—Å')) {
      console.log('‚ö†Ô∏è –í —Ñ–∞–π–ª–µ .env.docker –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:');
      console.log('   - "–≤–∞—à_–¥–æ–º–µ–Ω_–∏–ª–∏_ip_–∞–¥—Ä–µ—Å" –≤ NEXT_PUBLIC_API_URL');
      console.log('\n‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!');
    }
    
    console.log('\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log(`1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞—Ä—Ö–∏–≤ ${archiveWithTimestamp} –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
    console.log('2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.docker –≤ .env –∏ –≤–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ docker-compose up -d');
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: ${error.message}`);
    process.exit(1);
  }
  
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  process.exit(1);
}
