version: '3'

services:
  # Основное приложение Next.js
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      # Используем buildkit для ускорения сборки
      args:
        - NODE_ENV=${NODE_ENV:-development}
    container_name: studio_app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-studio_db}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USERNAME=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - DB_NAME=${POSTGRES_DB:-studio_db}
    volumes:
      # В режиме разработки монтируем директории для hot-reload
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - studio_network
    # Healthcheck для проверки работоспособности
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # База данных PostgreSQL
  db:
    image: postgres:14
    container_name: studio_db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-studio_db}
    ports:
      - "${DB_PORT_MAPPING:-5432:5432}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Монтируем директорию для инициализационных скриптов
      - ./scripts/db-init:/docker-entrypoint-initdb.d
    networks:
      - studio_network
    # Healthcheck для проверки работоспособности
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-studio_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin для управления базой данных
  pgadmin:
    image: dpage/pgadmin4
    container_name: studio_pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT_MAPPING:-8080:80}"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - studio_network

  # Nginx для проксирования запросов в продакшн-среде
  # Раскомментируйте на продакшн-сервере
  # nginx:
  #   image: nginx:alpine
  #   container_name: studio_nginx
  #   restart: always
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #     - ./ssl:/etc/nginx/ssl
  #   depends_on:
  #     - app
  #   networks:
  #     - studio_network

  # Сервис для инструментов разработки - используется только локально
  # Portainer - визуальный интерфейс для управления Docker
  portainer:
    image: portainer/portainer-ce:latest
    container_name: studio_portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    ports:
      - "${PORTAINER_PORT_MAPPING:-9000:9000}"
    networks:
      - studio_network

networks:
  studio_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  portainer_data:
    driver: local
